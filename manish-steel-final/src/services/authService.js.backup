/**
 * Secure Authentication Service
 * Handles all authentication operations with enhanced security
 */

import portDiscovery from './portDiscovery';

class AuthService {
  constructor() {
    this.TOKEN_KEY = 'manish_steel_auth_token';
    this.USER_KEY = 'manish_steel_user_data';
    this.REFRESH_KEY = 'manish_steel_refresh_token';
    this.tokenCheckInterval = null;
    this.apiBaseUrl = null; // Will be set dynamically
    this.isApiConnected = false; // Track API connectivity
    
    // Initialize API base URL
    this.initializeApiUrl();
    
    // Start token validation on service initialization
    this.initializeTokenValidation();
  }

  /**
   * Initialize API base URL using port discovery
   */
  async initializeApiUrl() {
    try {
      this.apiBaseUrl = await portDiscovery.discoverPort();
      console.log('AuthService: API base URL set to:', this.apiBaseUrl);
      
      // Test the connection with a shorter timeout
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 2000);
        
        const response = await fetch(`${this.apiBaseUrl}/health`, { 
          signal: controller.signal 
        }).catch(e => {
          console.warn('AuthService: API health check failed with error:', e.message);
          return { ok: false };
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) {
          this.isApiConnected = true;
          console.log('AuthService: API connection successful');
        } else {
          this.isApiConnected = false;
          console.warn('AuthService: API health check failed - server not responding correctly');
        }
      } catch (error) {
        console.warn('AuthService: API health check failed:', error.message);
        this.isApiConnected = false;
      }
    } catch (error) {
      console.error('AuthService: Failed to discover API port:', error);
      this.apiBaseUrl = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3001/api';
      this.isApiConnected = false;
    }
  }

  /**
   * Get API base URL
   */
  async getApiBaseUrl() {
    if (!this.apiBaseUrl) {
      await this.initializeApiUrl();
    }
    return this.apiBaseUrl;
  }

  /**
   * Check if API is connected
   */
  isApiAvailable() {
    return this.isApiConnected;
  }

  /**
   * Make authenticated API request
   */
  async apiRequest(endpoint, options = {}) {
    const token = this.getToken();
    const apiBaseUrl = await this.getApiBaseUrl();
    
    const config = {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` })
      },
      ...options
    };

    try {
      console.log('API Request to:', `${apiBaseUrl}${endpoint}`, config);
      
      // Add timeout to prevent hanging requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      config.signal = controller.signal;
      
      const response = await fetch(`${apiBaseUrl}${endpoint}`, config);
      clearTimeout(timeoutId);
      
      console.log('API Response status:', response.status, response.statusText);
      
      // Check if response is HTML instead of JSON
      const text = await response.text();
      let data;
      try {
        data = JSON.parse(text);
      } catch (e) {
        console.error('Failed to parse response as JSON:', text.substring(0, 150) + '...');
        throw new Error('Invalid JSON response from server');
      }

      // Handle token expiration
      if (!response.ok && data.code === 'TOKEN_EXPIRED') {
        this.logout();
        window.location.href = '/login';
        throw new Error('Session expired. Please login again.');
      }

      console.log('API Request successful, data:', data);
      return { response, data };
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }

  /**
   * Login user with email/phone and password
   */
  async login(emailOrPhone, password) {
    try {
      // Input validation
      if (!emailOrPhone || !password) {
        throw new Error('Email/phone and password are required');
      }

      // Sanitize input
      const sanitizedEmail = emailOrPhone.toString().trim();
      
      // Check if API is connected and try API login first
      if (this.isApiConnected) {
        console.log('API is connected, attempting API login...');
        
        try {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000);
          
          const response = await fetch(`${this.apiBaseUrl}/api/auth/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              email: sanitizedEmail,
              password: password
            }),
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          
          if (response.ok) {
            const data = await response.json();
            
            if (data.success && data.data.token) {
              // Store authentication data securely
              this.setToken(data.data.token);
              this.setUser(data.data.user);
              
              // Start token validation
              this.startTokenValidation();
              
              console.log('API login successful for user:', data.data.user.email);
              
              return {
                success: true,
                user: data.data.user,
                message: data.message || 'Login successful'
              };
            } else {
              throw new Error(data.message || 'Invalid response from server');
            }
          } else {
            throw new Error('Login failed. Please check your credentials.');
          }
        } catch (error) {
          console.error('API login failed:', error.message);
          
          // If API login fails but it's admin credentials, fall back to offline mode
          if (sanitizedEmail === '9814379071' && password === 'M@nishsteel') {
            console.log('API login failed for admin, falling back to offline mode...');
            
            // Create admin user for offline mode
            const mockAdminUser = {
              id: 'admin-local',
              name: 'Admin User',
              email: '9814379071',
              role: 'admin',
              isAdmin: true
            };
            
            // Create a proper JWT-like token manually (for offline mode only)
            const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiYWRtaW4tbG9jYWwifSwiaXNzIjoibWFuaXNoLXN0ZWVsLWFwaSIsImF1ZCI6Im1hbmlzaC1zdGVlbC1mcm9udGVuZCIsImlhdCI6MTYyMDMxMjM0NSwiZXhwIjoxNjIwMzk4NzQ1fQ.mocked-signature-for-local-development-only';
            
            // Store authentication data
            this.setToken(mockToken);
            this.setUser(mockAdminUser);
            
            console.log('Admin login successful (offline mode)');
            return {
              success: true,
              user: mockAdminUser,
              message: 'Login successful (offline mode)'
            };
          }
          
          // For non-admin users or if not admin credentials, throw the error
          throw error;
        }
      }
      
      // If API is not connected, only allow admin login in offline mode
      if (sanitizedEmail === '9814379071' && password === 'M@nishsteel') {
        console.log('Admin credentials detected, proceeding with offline login...');
        
        // Create admin user for offline mode
        const mockAdminUser = {
          id: 'admin-local',
          name: 'Admin User',
          email: '9814379071',
          role: 'admin',
          isAdmin: true
        };
        
        // Create a proper JWT-like token manually (for offline mode only)
        const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiYWRtaW4tbG9jYWwifSwiaXNzIjoibWFuaXNoLXN0ZWVsLWFwaSIsImF1ZCI6Im1hbmlzaC1zdGVlbC1mcm9udGVuZCIsImlhdCI6MTYyMDMxMjM0NSwiZXhwIjoxNjIwMzk4NzQ1fQ.mocked-signature-for-local-development-only';
        
        // Store authentication data
        this.setToken(mockToken);
        this.setUser(mockAdminUser);
        
        console.log('Admin login successful (offline mode)');
        return {
          success: true,
          user: mockAdminUser,
          message: 'Login successful (offline mode)'
        };
      }
      
      // If we reach here, it means API is not connected and credentials are not admin
      throw new Error('Server is currently unavailable. Please try again later.');
    } catch (error) {
      console.error('Login error:', error.message);
      return {
        success: false,
        message: error.message || 'Login failed. Please try again.'
      };
    }
  }

  /**
   * Logout user and clean up
   */
  async logout() {
    try {
      // Notify server about logout (if token exists)
      const token = this.getToken();
      if (token) {
        await this.apiRequest('/auth/logout', {
          method: 'POST'
        }).catch(() => {
          // Ignore errors for logout API call
          console.log('Server logout notification failed (ignored)');
        });
      }
    } catch (error) {
      console.error('Logout API error:', error);
    } finally {
      // Clean up local storage regardless of API response
      this.clearAuthData();
      this.stopTokenValidation();
      console.log('Logout completed');
    }
  }

  /**
   * Get current user from server
   */
  async getCurrentUser() {
    try {
      if (!this.isAuthenticated()) {
        throw new Error('Not authenticated');
      }

      const { response, data } = await this.apiRequest('/auth/me');

      if (!response.ok) {
        throw new Error(data.message || 'Failed to get user data');
      }

      if (data.success && data.data.user) {
        // Update stored user data
        this.setUser(data.data.user);
        return data.data.user;
      } else {
        throw new Error('Invalid user data received');
      }
    } catch (error) {
      console.error('Get current user error:', error);
      // If token is invalid, logout
      if (error.message.includes('expired') || error.message.includes('invalid')) {
        this.logout();
      }
      throw error;
    }
  }

  /**
   * Change user password
   */
  async changePassword(currentPassword, newPassword) {
    try {
      if (!currentPassword || !newPassword) {
        throw new Error('Current password and new password are required');
      }

      const { response, data } = await this.apiRequest('/auth/change-password', {
        method: 'POST',
        body: JSON.stringify({
          currentPassword,
          newPassword
        })
      });

      if (!response.ok) {
        throw new Error(data.message || 'Password change failed');
      }

      return {
        success: true,
        message: data.message || 'Password changed successfully'
      };
    } catch (error) {
      console.error('Change password error:', error);
      return {
        success: false,
        message: error.message || 'Password change failed'
      };
    }
  }

  /**
   * Check if user is authenticated
   */
  isAuthenticated() {
    const token = this.getToken();
    const user = this.getUser();
    
    if (!token || !user) {
      return false;
    }

    // For local admin token, always return true
    if (token === 'local-fallback-token' && user.email === '9814379071') {
      return true;
    }

    // Basic token expiration check
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Date.now() / 1000;
      
      if (payload.exp < currentTime) {
        console.log('Token expired');
        this.logout();
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Token validation error:', error);
      this.logout();
      return false;
    }
  }

  /**
   * Get stored auth token
   */
  getToken() {
    try {
      return localStorage.getItem(this.TOKEN_KEY);
    } catch (error) {
      console.error('Error getting token:', error);
      return null;
    }
  }

  /**
   * Set auth token
   */
  setToken(token) {
    try {
      localStorage.setItem(this.TOKEN_KEY, token);
    } catch (error) {
      console.error('Error setting token:', error);
    }
  }

  /**
   * Get stored user data
   */
  getUser() {
    try {
      const userData = localStorage.getItem(this.USER_KEY);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Error getting user data:', error);
      return null;
    }
  }

  /**
   * Set user data
   */
  setUser(user) {
    try {
      localStorage.setItem(this.USER_KEY, JSON.stringify(user));
    } catch (error) {
      console.error('Error setting user data:', error);
    }
  }

  /**
   * Clear all authentication data
   */
  clearAuthData() {
    try {
      // Remove all possible auth-related keys
      const authKeys = [
        this.TOKEN_KEY,
        this.USER_KEY, 
        this.REFRESH_KEY,
        'isAuthenticated',
        'isAdminLoggedIn',
        'auth_token',
        'user_data'
      ];
      
      authKeys.forEach(key => {
        localStorage.removeItem(key);
      });
      
      console.log('All authentication data cleared');
    } catch (error) {
      console.error('Error clearing auth data:', error);
    }
  }

  /**
   * Force logout and clear all data
   */
  async forceLogout() {
    console.log('Force logout initiated');
    this.clearAuthData();
    this.stopTokenValidation();
    
    // Redirect to login page
    if (typeof window !== 'undefined') {
      window.location.href = '/login';
    }
  }

  /**
   * Initialize token validation on app start
   */
  initializeTokenValidation() {
    if (this.isAuthenticated()) {
      this.startTokenValidation();
    }
  }

  /**
   * Start periodic token validation
   */
  startTokenValidation() {
    // Check token validity every 5 minutes
    this.tokenCheckInterval = setInterval(() => {
      if (!this.isAuthenticated()) {
        this.stopTokenValidation();
      }
    }, 5 * 60 * 1000);
  }

  /**
   * Stop token validation
   */
  stopTokenValidation() {
    if (this.tokenCheckInterval) {
      clearInterval(this.tokenCheckInterval);
      this.tokenCheckInterval = null;
    }
  }

  /**
   * Get authorization header for API requests
   */
  getAuthHeader() {
    const token = this.getToken();
    return token ? { Authorization: `Bearer ${token}` } : {};
  }

  /**
   * Check if the current user is an admin
   */
  isAdmin() {
    const user = this.getUser();
    return user && (user.role === 'admin' || user.isAdmin === true);
  }

  /**
   * Is authenticated and has admin privileges
   */
  isAuthenticatedAdmin() {
    return this.isAuthenticated() && this.isAdmin();
  }
}

// Create singleton instance
const authService = new AuthService();

// Export both the class and the instance
export default authService;
export { AuthService };
