import React, { useState, useEffect } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { 
  FaSearch, 
  FaHeart, 
  FaEye, 
  FaChevronDown, 
  FaChevronUp, 
  FaFilter, 
  FaShoppingCart, 
  FaTag, 
  FaStar, 
  FaArrowDown, 
  FaTimes,
  FaList 
} from 'react-icons/fa';
import { useOptimizedProducts } from '../hooks/useOptimizedProducts';
import { useCategoryNavigation } from '../hooks/useCategoryNavigation';
import ProductCard from '../components/ProductCard';

const ProductsPage = () => {
  // Use optimized hooks for instant loading
  const { 
    products: filteredAndSortedProducts, 
    loading, 
    error, 
    searchTerm, 
    sortOption,
    selectedCategory, 
    selectedSubcategory,
    updateSearchTerm: setSearchTerm,
    updateSortOption: setSortOption,
    refreshProducts
  } = useOptimizedProducts();
  
  const { categories, getCategoryById, getSubcategoryById } = useCategoryNavigation();
  
  // UI state
  const [expandedCategories, setExpandedCategories] = useState({});
  const [mobileFiltersVisible, setMobileFiltersVisible] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(12);
  const [sortDrawerVisible, setSortDrawerVisible] = useState(false);
  const [quickViewProduct, setQuickViewProduct] = useState(null);
  const [loadedImages, setLoadedImages] = useState({});
  
  const location = useLocation();
  const navigate = useNavigate();

  // Use filtered products from the hook with fallback to empty array for safety
  const products = filteredAndSortedProducts || [];
  const filteredProducts = filteredAndSortedProducts || [];
  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);
  
  // Effect to reset to first page if we have fewer products
  useEffect(() => {
    if (filteredProducts.length > 0 && filteredProducts.length <= (currentPage - 1) * itemsPerPage) {
      setCurrentPage(1);
    }
  }, [filteredProducts, currentPage, itemsPerPage]);

  // Toggle mobile filters visibility
  const toggleMobileFilters = () => {
    setMobileFiltersVisible(!mobileFiltersVisible);
  };

  // Toggle sort options drawer visibility
  const toggleSortDrawer = () => {
    setSortDrawerVisible(!sortDrawerVisible);
  };
  
  // Open quick view modal for a product
  const openQuickView = (product) => {
    setQuickViewProduct(product);
    document.body.style.overflow = 'hidden';
  };

  // Close quick view modal
  const closeQuickView = () => {
    setQuickViewProduct(null);
    document.body.style.overflow = 'unset';
  };
  
  // Handle background click for modal
  const handleModalBackgroundClick = (e) => {
    if (e.target === e.currentTarget) {
      closeQuickView();
    }
  };

  // Handle product view details
  const handleViewDetails = (productId) => {
    if (!productId) return;
    closeQuickView();
    
    const formattedId = productId.toString().replace(/^p/, '');
    navigate(`/products/${formattedId}`);
  };

  // Cleanup scroll lock on unmount
  useEffect(() => {
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, []);
  
  // Navigation utility for categories/subcategories
  const navigateToProducts = (category, subcategory = null) => {
    let url = '/products';
    const params = new URLSearchParams();
    
    if (category && category !== 'all') {
      params.set('category', category);
      if (subcategory) {
        params.set('subcategory', subcategory);
      }
    }
    
    if (params.toString()) {
      url += `?${params.toString()}`;
    }
    
    navigate(url, { replace: true });
  };

  // Render star ratings
  const renderRating = (rating) => {
    return (
      <div className="flex items-center">
        {[...Array(5)].map((_, index) => (
          <FaStar
            key={`star-${index}`}
            className={`h-4 w-4 ${
              index < Math.floor(rating) ? 'text-yellow-400' : 'text-gray-300'
            }`}
          />
        ))}
        <span className="text-sm text-gray-600 ml-2">({rating})</span>
      </div>
    );
  };

  // Generate placeholder image URLs for products without images
  const getProductImage = (product) => {
    if (product.image) {
      return product.image;
    }
    if (product.images && product.images.length > 0) {
      return product.images[0];
    }
    
    const furnitureImages = [
      '/images/furniture-1.jpg',
      '/images/furniture-2.jpg'
    ];
    const seed = product._id || product.name || '';
    return furnitureImages[seed.toString().charCodeAt(0) % furnitureImages.length];
  };

  // Toggle category expansion in sidebar
  const toggleCategoryExpansion = (categoryId) => {
    setExpandedCategories(prev => ({
      ...prev,
      [categoryId]: !prev[categoryId]
    }));
  };

  // Handle category filter click
  const handleCategoryFilter = (categoryId) => {
    navigateToProducts(categoryId);
  };

  // Handle subcategory filter click
  const handleSubcategoryFilter = (categoryId, subcategoryId) => {
    navigateToProducts(categoryId, subcategoryId);
  };

  // Calculate products for current page, ensuring filteredProducts is always an array
  const currentProducts = (filteredProducts || []).slice(
    (currentPage - 1) * itemsPerPage,
    (currentPage - 1) * itemsPerPage + itemsPerPage
  );

  // Handle page change
  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // Sort options
  const sortOptions = [
    { value: 'default', label: 'Default' },
    { value: 'price-low-high', label: 'Price: Low to High' },
    { value: 'price-high-low', label: 'Price: High to Low' },
    { value: 'name-a-z', label: 'Name: A to Z' },
    { value: 'name-z-a', label: 'Name: Z to A' },
    { value: 'newest', label: 'Newest First' }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header Section */}
      <div className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-6">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h1 className="text-3xl font-bold text-primary mb-2">Our Products</h1>
              <p className="text-gray-600">
                Discover our range of quality steel furniture.
                {selectedCategory !== 'all' && getCategoryById(selectedCategory) && (
                  <>
                    {' '}<span className="font-medium">Category: {getCategoryById(selectedCategory)?.name}</span>
                    {selectedSubcategory && getSubcategoryById(selectedCategory, selectedSubcategory) && (
                      <>
                        {' > '}<span className="font-medium">{getSubcategoryById(selectedCategory, selectedSubcategory)?.name}</span>
                      </>
                    )}
                  </>
                )}
              </p>
              {error && (
                <div className="mt-2 p-2 bg-red-100 text-red-800 rounded flex items-center">
                  <FaTimes className="mr-2" />
                  Error loading products: {error}
                </div>
              )}
            </div>
            
            <div className="flex items-center gap-3">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search products..."
                  className="bg-gray-100 py-2 pl-10 pr-4 rounded-md w-full md:w-64 focus:outline-none focus:ring-2 focus:ring-primary"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              </div>
              
              <button 
                onClick={toggleSortDrawer}
                className="bg-gray-100 p-2 rounded-md hover:bg-gray-200 transition-colors flex items-center gap-2"
              >
                <FaArrowDown className="text-gray-600" />
                <span className="hidden md:inline">Sort</span>
              </button>
              
              <button 
                onClick={toggleMobileFilters}
                className="md:hidden bg-gray-100 p-2 rounded-md hover:bg-gray-200 transition-colors"
              >
                <FaFilter className="text-gray-600" />
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Sort Drawer */}
      {sortDrawerVisible && (
        <div className="bg-white border-t border-b border-gray-200 shadow-md">
          <div className="container mx-auto px-4 py-3">
            <div className="flex flex-wrap items-center gap-3">
              <span className="font-medium text-gray-700 flex items-center">
                <FaArrowDown className="mr-2" /> Sort by:
              </span>
              {sortOptions.map(option => (
                <button
                  key={option.value}
                  className={`px-3 py-1 rounded-full text-sm ${
                    sortOption === option.value
                      ? 'bg-primary text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                  onClick={() => {
                    setSortOption(option.value);
                    setSortDrawerVisible(false);
                  }}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
      
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row">
          {/* Sidebar Filters - Desktop */}
          <div className={`w-full md:w-64 md:block ${mobileFiltersVisible ? 'block' : 'hidden'}`}>
            <div className="bg-white rounded-lg shadow p-4 mb-6 sticky top-24">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-bold text-gray-800">Filters</h2>
                <button 
                  className="md:hidden text-gray-500 hover:text-gray-800"
                  onClick={toggleMobileFilters}
                >
                  <FaTimes />
                </button>
              </div>
              
              <div>
                <h3 className="font-medium text-gray-700 mb-2">Categories</h3>
                <ul className="space-y-2">
                  <li>
                    <button
                      className={`w-full text-left px-2 py-1 rounded ${
                        selectedCategory === 'all' ? 'bg-primary/10 text-primary font-medium' : 'hover:bg-gray-100'
                      }`}
                      onClick={() => handleCategoryFilter('all')}
                    >
                      All Products
                    </button>
                  </li>
                  
                  {Array.isArray(categories) && categories.map(category => (
                    <li key={category.id || category._id}>
                      <div className="flex items-center justify-between">
                        <button
                          className={`text-left px-2 py-1 rounded flex-1 ${
                            selectedCategory === (category.id || category._id) && !selectedSubcategory 
                              ? 'bg-primary/10 text-primary font-medium' 
                              : 'hover:bg-gray-100'
                          }`}
                          onClick={() => handleCategoryFilter(category.id || category._id)}
                        >
                          {category.name}
                        </button>
                        
                        {category.subcategories && category.subcategories.length > 0 && (
                          <button
                            onClick={() => toggleCategoryExpansion(category.id || category._id)}
                            className="p-1 text-gray-500 hover:text-gray-800"
                          >
                            {expandedCategories[category.id || category._id] ? (
                              <FaChevronUp size={12} />
                            ) : (
                              <FaChevronDown size={12} />
                            )}
                          </button>
                        )}
                      </div>
                      
                      {/* Subcategories */}
                      {category.subcategories && category.subcategories.length > 0 && expandedCategories[category.id || category._id] && (
                        <ul className="ml-4 mt-1 space-y-1">
                          {category.subcategories.map(subcategory => (
                            <li key={subcategory.id || subcategory._id}>
                              <button
                                className={`w-full text-left px-2 py-1 rounded text-sm ${
                                  selectedCategory === (category.id || category._id) && 
                                  selectedSubcategory === (subcategory.id || subcategory._id)
                                    ? 'bg-primary/10 text-primary font-medium' 
                                    : 'hover:bg-gray-100'
                                }`}
                                onClick={() => handleSubcategoryFilter(
                                  category.id || category._id, 
                                  subcategory.id || subcategory._id
                                )}
                              >
                                {subcategory.name}
                              </button>
                            </li>
                          ))}
                        </ul>
                      )}
                    </li>
                  ))}
                </ul>
              </div>
              
              {/* Clear filters button */}
              <button
                onClick={() => navigateToProducts('all')}
                className="mt-6 w-full bg-gray-100 text-gray-700 py-2 rounded-md hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
              >
                <FaTimes size={14} />
                Clear Filters
              </button>
            </div>
          </div>
          
          {/* Main Content */}
          <div className="w-full md:flex-1 md:ml-6">
            {/* Product Count and View Toggles */}
            <div className="flex justify-between items-center mb-6">
              <p className="text-gray-600">
                {loading ? (
                  'Loading products...'
                ) : (
                  <>
                    Showing {filteredProducts.length > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0} - {
                      Math.min(currentPage * itemsPerPage, filteredProducts.length)
                    } of {filteredProducts.length} products
                  </>
                )}
              </p>
            </div>
            
            {/* Products Grid */}
            {loading ? (
              // Loading skeleton
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {[...Array(8)].map((_, index) => (
                  <div key={index} className="bg-white rounded-lg shadow animate-pulse">
                    <div className="h-48 bg-gray-300 rounded-t-lg"></div>
                    <div className="p-4">
                      <div className="h-5 bg-gray-300 rounded mb-2 w-3/4"></div>
                      <div className="h-4 bg-gray-300 rounded mb-2 w-1/2"></div>
                      <div className="h-4 bg-gray-300 rounded mb-4 w-2/3"></div>
                      <div className="h-8 bg-gray-300 rounded w-full"></div>
                    </div>
                  </div>
                ))}
              </div>
            ) : filteredProducts.length > 0 ? (
              // Products grid
              <div>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                  {currentProducts.map((product) => (
                    <ProductCard 
                      key={product._id || product.id} 
                      product={product} 
                      onQuickView={openQuickView}
                      onViewDetails={() => handleViewDetails(product._id || product.id)}
                    />
                  ))}
                </div>
                
                {/* Pagination */}
                {totalPages > 1 && (
                  <div className="mt-8 flex justify-center">
                    <nav className="flex items-center gap-1">
                      <button
                        disabled={currentPage === 1}
                        onClick={() => handlePageChange(currentPage - 1)}
                        className={`p-2 rounded ${
                          currentPage === 1
                            ? 'text-gray-400 cursor-not-allowed'
                            : 'text-gray-800 hover:bg-gray-100'
                        }`}
                      >
                        &laquo;
                      </button>
                      
                      {[...Array(totalPages)].map((_, index) => {
                        const pageNumber = index + 1;
                        return (
                          <button
                            key={pageNumber}
                            onClick={() => handlePageChange(pageNumber)}
                            className={`w-10 h-10 flex items-center justify-center rounded ${
                              currentPage === pageNumber
                                ? 'bg-primary text-white'
                                : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                            }`}
                          >
                            {pageNumber}
                          </button>
                        );
                      })}
                      
                      <button
                        disabled={currentPage === totalPages}
                        onClick={() => handlePageChange(currentPage + 1)}
                        className={`p-2 rounded ${
                          currentPage === totalPages
                            ? 'text-gray-400 cursor-not-allowed'
                            : 'text-gray-800 hover:bg-gray-100'
                        }`}
                      >
                        &raquo;
                      </button>
                    </nav>
                  </div>
                )}
              </div>
            ) : (
              // No products found
              <div className="bg-white p-8 rounded-lg shadow text-center">
                <div className="text-gray-500 text-6xl mb-4">
                  <FaSearch className="mx-auto opacity-30" />
                </div>
                <h3 className="text-xl font-bold text-gray-700 mb-2">No Products Found</h3>
                <p className="text-gray-500 mb-6">
                  {searchTerm ? (
                    <>No products match your search "{searchTerm}".</>
                  ) : (
                    <>No products available in this category at the moment.</>
                  )}
                </p>
                <div className="flex justify-center gap-4">
                  {searchTerm && (
                    <button
                      onClick={() => setSearchTerm('')}
                      className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors"
                    >
                      Clear Search
                    </button>
                  )}
                  <button
                    onClick={() => navigateToProducts('all')}
                    className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors"
                  >
                    View All Products
                  </button>
                  <button
                    onClick={refreshProducts}
                    className="px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Refresh
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* Quick View Modal */}
      {quickViewProduct && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4"
          onClick={handleModalBackgroundClick}
        >
          <div 
            className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-screen overflow-auto"
            onClick={e => e.stopPropagation()}
          >
            {/* Modal Header */}
            <div className="flex justify-between items-center p-4 border-b">
              <h3 className="text-xl font-bold text-gray-800">
                {quickViewProduct.name}
              </h3>
              <button 
                onClick={closeQuickView}
                className="text-gray-600 hover:text-gray-900"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            {/* Modal Content */}
            <div className="p-6">
              <div className="flex flex-col md:flex-row gap-8">
                {/* Product Image */}
                <div className="w-full md:w-1/2">
                  <img 
                    src={getProductImage(quickViewProduct)} 
                    alt={quickViewProduct.name} 
                    className="w-full h-80 object-cover object-center rounded-lg"
                  />
                </div>
                
                {/* Product Details */}
                <div className="w-full md:w-1/2">
                  <div className="mb-4">
                    {quickViewProduct.rating && renderRating(quickViewProduct.rating)}
                  </div>
                  
                  <div className="mb-6">
                    <h4 className="text-gray-600 mb-4">
                      {quickViewProduct.description}
                    </h4>
                    
                    <div className="mb-4">
                      <span className="text-2xl font-bold text-primary">
                        {quickViewProduct.price 
                          ? `Rs. ${parseFloat(quickViewProduct.price).toLocaleString()}`
                          : 'Price upon request'
                        }
                      </span>
                    </div>
                    
                    <div className="mb-4">
                      <h4 className="font-medium text-gray-700 mb-2">Key Features:</h4>
                      <ul className="list-disc list-inside text-gray-600 space-y-1">
                        <li>Premium steel construction</li>
                        <li>Rust-resistant coating</li>
                        <li>High durability design</li>
                        <li>Secure locking mechanism</li>
                      </ul>
                    </div>
                    
                    <div className="mb-6">
                      <h4 className="font-medium text-gray-700 mb-2">Available Colors:</h4>
                      <div className="flex gap-2">
                        {['Gray', 'White', 'Brown', 'Black'].map((color) => (
                          <div key={color} className="flex items-center gap-1">
                            <div 
                              className={`w-4 h-4 rounded-full border border-gray-300`} 
                              style={{ backgroundColor: color.toLowerCase() }} 
                            />
                            <span className="text-sm text-gray-600">{color}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                  
                  {/* Product Actions */}
                  <div className="flex flex-wrap gap-4">
                    <button
                      onClick={() => handleViewDetails(quickViewProduct._id || quickViewProduct.id)}
                      className="bg-primary text-white px-6 py-2 rounded-md hover:bg-primary/90 transition-colors flex items-center gap-2"
                    >
                      <FaEye />
                      View Details
                    </button>
                    
                    <Link
                      to="/contact"
                      className="bg-white text-primary px-6 py-2 rounded-md border border-primary hover:bg-primary/10 transition-colors flex items-center gap-2"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Inquire
                    </Link>
                    
                    <button
                      className="bg-gray-100 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-200 transition-colors flex items-center gap-2"
                    >
                      <FaHeart />
                      Add to Wishlist
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductsPage;
