import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import LightboxGallery from '../components/LightboxGallery';
import ProfessionalGalleryModal from '../components/ProfessionalGalleryModal';
import { galleryAPI } from '../services/galleryAPI';
import { FaImages, FaEye, FaFilter, FaThLarge, FaList, FaStar, FaHeart, FaAngleUp, FaAngleRight, FaExclamationTriangle, FaSync } from 'react-icons/fa';
import { scrollToTop } from '../utils/scrollUtils';
import GalleryHero from '../components/GalleryHero';
import ImageService from '../services/imageService';
import OptimizedImage from '../components/common/OptimizedImage';
import { testimonials } from '../data/testimonials';

// Custom CSS for the gallery
import './gallery-page.css';

// Animation variants for Framer Motion
const animations = {
  container: {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  },
  item: {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5
      }
    }
  },
  section: {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.7,
        when: "beforeChildren"
      }
    }
  }
};

const GalleryPage = () => {
  // Page configuration
  const [config, setConfig] = useState({
    title: 'Our Premium Gallery',
    subtitle: 'Discover our master craftsmanship through stunning visuals',
    layout: 'grid',
    showFilters: true,
    showStats: true,
    heroImage: null
  });
  
  // Main data states using the new sections-based structure
  const [sections, setSections] = useState([]);
  const [activeSectionId, setActiveSectionId] = useState('all');
  
  // UI states
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [viewMode, setViewMode] = useState('grid');
  const [retryCount, setRetryCount] = useState(0);
  
  // Professional Gallery Modal states
  const [isGalleryModalOpen, setIsGalleryModalOpen] = useState(false);
  const [galleryModalImages, setGalleryModalImages] = useState([]);
  const [galleryModalTitle, setGalleryModalTitle] = useState('');
  const [galleryModalInitialIndex, setGalleryModalInitialIndex] = useState(0);
  
  // Testimonial state - manage testimonial slider
  const [currentTestimonialIndex, setCurrentTestimonialIndex] = useState(0);

  // Monitor viewMode changes
  useEffect(() => {
    console.log(`View mode changed to: ${viewMode}`);
  }, [viewMode]);

  // Load sections and initial data from API
  useEffect(() => {
    const loadGalleryData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Load gallery config and sections in parallel
        const [configResponse, galleryResponse] = await Promise.all([
          galleryAPI.getGalleryConfig().catch(() => ({ data: null })),
          galleryAPI.getGallery().catch(() => ({ data: { sections: [] } }))
        ]);

        // Update configuration if available
        if (configResponse && configResponse.data) {
          setConfig(prevConfig => ({...prevConfig, ...configResponse.data}));
        }
        
        // Process gallery sections
        const gallerySections = galleryResponse.data?.sections || [];
        
        // Ensure we have valid data structure for each section
        const formattedSections = gallerySections.map(section => ({
          id: section._id || section.id,
          name: section.name || 'Unnamed Section',
          description: section.description || '',
          category: section.category || 'residential',
          featured: section.featured || false,
          order: section.order || 0,
          images: Array.isArray(section.images) ? section.images.map(formatGalleryImage) : []
        }));
        
        // Sort sections by order field
        formattedSections.sort((a, b) => a.order - b.order);
        
        setSections(formattedSections);
        setLoading(false);
      } catch (error) {
        console.error('Error loading gallery data:', error);
        setError(error.message || 'Failed to load gallery data');
        setLoading(false);
      }
    };

    loadGalleryData();
  }, []);

  // Format gallery image data consistently
  const formatGalleryImage = (image) => {
    if (!image) return null;
    
    // Get optimized image URL
    const optimizedImageUrl = ImageService.getOptimizedImageUrl(image.url || image.src || image, {
      width: 800,
      height: 600
    });
    
    return {
      id: image._id || image.id || `img-${Math.random().toString(36).substring(2, 9)}`,
      src: optimizedImageUrl,
      originalUrl: image.url || image.src || image,
      title: image.title || '',
      description: image.description || '',
      alt: image.title || 'Gallery image',
      tags: image.tags || [],
      featured: image.featured || false
    };
  };

  // Get gallery statistics
  const getGalleryStats = () => {
    let totalImages = 0;
    sections.forEach(section => {
      totalImages += section.images.length;
    });
    
    return {
      totalImages,
      totalSections: sections.length,
      featuredImages: sections.reduce((count, section) => 
        count + section.images.filter(img => img.featured).length, 0)
    };
  };

  const stats = getGalleryStats();
  
  // Get all sections or filter by section ID
  const getDisplayedSections = () => {
    if (activeSectionId === 'all') {
      return sections;
    } else if (activeSectionId === 'featured') {
      // For featured view, get all sections but only show featured images
      return sections.map(section => ({
        ...section,
        images: section.images.filter(img => img.featured)
      })).filter(section => section.images.length > 0);
    } else {
      // Return only the active section
      return sections.filter(section => section.id === activeSectionId);
    }
  };

  // Get all images from all sections (for "All" view)
  const getAllGalleryImages = () => {
    let allImages = [];
    sections.forEach(section => {
      allImages = [...allImages, ...section.images.map(img => ({
        ...img,
        sectionId: section.id,
        sectionName: section.name
      }))];
    });
    return allImages;
  };

  // Open the gallery modal with the specified images
  const openGalleryModal = (images, title, initialIndex = 0) => {
    setGalleryModalImages(images);
    setGalleryModalTitle(title);
    setGalleryModalInitialIndex(initialIndex);
    setIsGalleryModalOpen(true);
  };

  // Handle image click to open the gallery modal
  const handleImageClick = (section, imageIndex) => {
    const images = section.images.map(img => ({
      src: img.src,
      alt: img.alt || img.title || section.name,
      title: img.title,
      description: img.description
    }));
    
    openGalleryModal(images, section.name, imageIndex);
  };

  // Handle retry when loading fails
  const handleRetry = () => {
    setRetryCount(prev => prev + 1);
    setLoading(true);
    setError(null);
    
    // Force reload gallery data
    const loadGalleryData = async () => {
      try {
        const galleryResponse = await galleryAPI.getGallery();
        const gallerySections = galleryResponse.data?.sections || [];
        
        const formattedSections = gallerySections.map(section => ({
          id: section._id || section.id,
          name: section.name || 'Unnamed Section',
          description: section.description || '',
          category: section.category || 'residential',
          featured: section.featured || false,
          order: section.order || 0,
          images: Array.isArray(section.images) ? section.images.map(formatGalleryImage) : []
        }));
        
        formattedSections.sort((a, b) => a.order - b.order);
        
        setSections(formattedSections);
        setLoading(false);
      } catch (error) {
        console.error('Error reloading gallery data:', error);
        setError(error.message || 'Failed to reload gallery data');
        setLoading(false);
      }
    };
    
    loadGalleryData();
  };

  // Navigate to next testimonial
  const nextTestimonial = () => {
    setCurrentTestimonialIndex((prev) => 
      (prev + 1) % testimonials.length
    );
  };

  // Navigate to previous testimonial
  const prevTestimonial = () => {
    setCurrentTestimonialIndex((prev) => 
      (prev - 1 + testimonials.length) % testimonials.length
    );
  };

  // Testimonial rendering
  const renderTestimonials = () => {
    const currentTestimonial = testimonials[currentTestimonialIndex];
    
    return (
      <div className="testimonial-section">
        <h3 className="text-2xl font-bold mb-4">What Our Clients Say</h3>
        
        <div className="testimonial-carousel">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentTestimonialIndex}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.5 }}
              className="testimonial-item bg-gray-100 p-6 rounded-lg shadow-md"
            >
              <p className="text-lg italic mb-4">{currentTestimonial.text}</p>
              <div className="flex items-center">
                <div className="testimonial-avatar mr-3">
                  <img 
                    src={currentTestimonial.avatar || '/images/default-avatar.png'} 
                    alt={currentTestimonial.name}
                    className="w-12 h-12 rounded-full object-cover"
                  />
                </div>
                <div>
                  <p className="font-bold">{currentTestimonial.name}</p>
                  <p className="text-sm text-gray-600">{currentTestimonial.company}</p>
                </div>
              </div>
            </motion.div>
          </AnimatePresence>
          
          <div className="testimonial-controls mt-4 flex justify-center space-x-2">
            <button 
              onClick={prevTestimonial}
              className="p-2 bg-gray-200 rounded-full hover:bg-gray-300 transition"
              aria-label="Previous testimonial"
            >
              &larr;
            </button>
            <div className="testimonial-dots flex space-x-1">
              {testimonials.map((_, index) => (
                <button 
                  key={index}
                  onClick={() => setCurrentTestimonialIndex(index)}
                  className={`w-3 h-3 rounded-full ${
                    index === currentTestimonialIndex ? 'bg-primary' : 'bg-gray-300'
                  }`}
                  aria-label={`Testimonial ${index + 1}`}
                />
              ))}
            </div>
            <button 
              onClick={nextTestimonial}
              className="p-2 bg-gray-200 rounded-full hover:bg-gray-300 transition"
              aria-label="Next testimonial"
            >
              &rarr;
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="gallery-page container mx-auto px-4 py-8">
      {/* Hero Section */}
      <GalleryHero 
        title={config.title}
        subtitle={config.subtitle}
        imageUrl={config.heroImage}
      />
      
      {/* Content */}
      <div className="gallery-content mt-8">
        {/* Loading and Error States */}
        {loading && (
          <div className="text-center py-10">
            <div className="spinner inline-block w-12 h-12"></div>
            <p className="mt-4 text-gray-600">Loading our stunning gallery...</p>
          </div>
        )}
        
        {error && (
          <div className="error-state text-center py-10 bg-red-50 rounded-lg">
            <FaExclamationTriangle size={40} className="text-red-500 mx-auto mb-4" />
            <h3 className="text-xl font-bold text-red-700">Something went wrong</h3>
            <p className="mt-2 text-gray-700">{error}</p>
            <button 
              onClick={handleRetry}
              className="mt-4 px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark flex items-center mx-auto"
            >
              <FaSync className="mr-2" /> Retry Loading
            </button>
          </div>
        )}
        
        {!loading && !error && (
          <>
            {/* Gallery Controls */}
            <div className="gallery-controls mb-8 flex flex-wrap items-center justify-between gap-4">
              {/* Section Filters */}
              {config.showFilters && (
                <div className="filter-controls flex flex-wrap items-center gap-2">
                  <button
                    onClick={() => setActiveSectionId('all')}
                    className={`px-4 py-2 rounded-md ${
                      activeSectionId === 'all' 
                        ? 'bg-primary text-white' 
                        : 'bg-gray-100 hover:bg-gray-200'
                    }`}
                  >
                    All
                  </button>
                  <button
                    onClick={() => setActiveSectionId('featured')}
                    className={`px-4 py-2 rounded-md ${
                      activeSectionId === 'featured' 
                        ? 'bg-primary text-white' 
                        : 'bg-gray-100 hover:bg-gray-200'
                    }`}
                  >
                    <FaStar className="inline-block mr-1 text-sm" /> Featured
                  </button>
                  
                  {/* Individual Section Buttons */}
                  {sections.map(section => (
                    <button
                      key={section.id}
                      onClick={() => setActiveSectionId(section.id)}
                      className={`px-4 py-2 rounded-md ${
                        activeSectionId === section.id 
                          ? 'bg-primary text-white' 
                          : 'bg-gray-100 hover:bg-gray-200'
                      }`}
                    >
                      {section.name}
                    </button>
                  ))}
                </div>
              )}
              
              {/* View Mode Toggle */}
              <div className="view-controls flex items-center">
                <span className="mr-2 text-gray-600">View:</span>
                <button 
                  onClick={() => {
                    console.log("Setting view mode to grid");
                    setViewMode('grid');
                  }}
                  title="Grid View"
                  className={`p-2 rounded-md ${
                    viewMode === 'grid' 
                      ? 'bg-primary text-white' 
                      : 'bg-gray-100 hover:bg-gray-200'
                  }`}
                  aria-pressed={viewMode === 'grid'}
                >
                  <FaThLarge />
                </button>
                <button 
                  onClick={() => {
                    console.log("Setting view mode to list");
                    setViewMode('list');
                  }}
                  title="List View"
                  className={`p-2 rounded-md ml-2 ${
                    viewMode === 'list' 
                      ? 'bg-primary text-white' 
                      : 'bg-gray-100 hover:bg-gray-200'
                  }`}
                  aria-pressed={viewMode === 'list'}
                >
                  <FaList />
                </button>
              </div>
            </div>
            
            {/* Gallery Stats */}
            {config.showStats && (
              <div className="gallery-stats flex flex-wrap gap-4 mb-8 p-4 bg-gray-50 rounded-lg text-center">
                <div className="stat-item flex-1">
                  <div className="stat-value text-2xl font-bold">{stats.totalImages}</div>
                  <div className="stat-label text-gray-600">Total Images</div>
                </div>
                <div className="stat-item flex-1">
                  <div className="stat-value text-2xl font-bold">{stats.totalSections}</div>
                  <div className="stat-label text-gray-600">Gallery Sections</div>
                </div>
                <div className="stat-item flex-1">
                  <div className="stat-value text-2xl font-bold">{stats.featuredImages}</div>
                  <div className="stat-label text-gray-600">Featured Images</div>
                </div>
              </div>
            )}
            
            {/* Gallery Content */}
            <div className="gallery-sections">
              {activeSectionId === 'all' || activeSectionId === 'featured' ? (
                // Show all sections
                getDisplayedSections().map(section => (
                  section.images.length > 0 && (
                    <motion.div 
                      key={section.id}
                      className="gallery-section mb-12"
                      variants={animations.section}
                      initial="hidden"
                      animate="visible"
                    >
                      <div className="section-header mb-4">
                        <h2 className="text-2xl font-bold">{section.name}</h2>
                        {section.description && (
                          <p className="text-gray-600 mt-1">{section.description}</p>
                        )}
                      </div>
                      
                      {/* Section Images Grid/List */}
                      {viewMode === 'grid' ? (
                        <div className="gallery-grid-view grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                          {section.images.map((image, index) => (
                            <motion.div
                              key={image.id}
                              className="gallery-item"
                              variants={animations.item}
                              whileHover={{ scale: 1.02 }}
                              onClick={() => handleImageClick(section, index)}
                            >
                              <div className="gallery-card bg-white rounded-lg shadow-md overflow-hidden cursor-pointer">
                                <div className="image-wrapper relative" style={{paddingBottom: '75%'}}>
                                  <OptimizedImage
                                    src={image.src}
                                    alt={image.alt}
                                    className="absolute inset-0 w-full h-full object-cover transition-transform hover:scale-105"
                                    width={400}
                                    height={300}
                                    loading="lazy"
                                  />
                                  
                                  {image.featured && (
                                    <span className="absolute top-2 right-2 bg-primary text-white p-1 rounded-full">
                                      <FaStar />
                                    </span>
                                  )}
                                </div>
                                
                                {(image.title || image.description) && (
                                  <div className="p-3">
                                    {image.title && <h3 className="font-bold">{image.title}</h3>}
                                    {image.description && <p className="text-gray-600 text-sm mt-1">{image.description}</p>}
                                  </div>
                                )}
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      ) : (
                        <div className="gallery-list-view space-y-4">
                          {section.images.map((image, index) => (
                            <motion.div
                              key={image.id}
                              className="gallery-list-item bg-white rounded-lg shadow-md overflow-hidden cursor-pointer"
                              variants={animations.item}
                              onClick={() => handleImageClick(section, index)}
                            >
                              <div className="flex flex-col sm:flex-row">
                                <div className="image-wrapper sm:w-1/3 relative" style={{minHeight: '200px'}}>
                                  <OptimizedImage
                                    src={image.src}
                                    alt={image.alt}
                                    className="w-full h-full object-cover absolute inset-0"
                                    width={300}
                                    height={300}
                                    loading="lazy"
                                  />
                                </div>
                                
                                <div className="p-4 sm:w-2/3">
                                  <div className="flex items-start justify-between">
                                    <h3 className="font-bold">{image.title || 'Untitled Image'}</h3>
                                    {image.featured && (
                                      <span className="bg-primary text-white p-1 rounded-full">
                                        <FaStar />
                                      </span>
                                    )}
                                  </div>
                                  
                                  <p className="text-gray-600 mt-2">
                                    {image.description || 'No description available'}
                                  </p>
                                  
                                  {image.tags && image.tags.length > 0 && (
                                    <div className="mt-3">
                                      {image.tags.map((tag, idx) => (
                                        <span 
                                          key={idx} 
                                          className="inline-block bg-gray-100 px-2 py-1 rounded-full text-xs mr-2 mb-2"
                                        >
                                          {tag}
                                        </span>
                                      ))}
                                    </div>
                                  )}
                                  
                                  <button className="mt-3 text-primary flex items-center">
                                    <FaEye className="mr-1" /> View Details
                                  </button>
                                </div>
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      )}
                    </motion.div>
                  )
                ))
              ) : (
                // Show only selected section
                <div className="selected-section">
                  {getDisplayedSections().map(section => (
                    <motion.div 
                      key={section.id}
                      className="gallery-section"
                      variants={animations.section}
                      initial="hidden"
                      animate="visible"
                    >
                      <div className="section-header mb-6">
                        <h2 className="text-3xl font-bold">{section.name}</h2>
                        {section.description && (
                          <p className="text-gray-600 mt-2">{section.description}</p>
                        )}
                      </div>
                      
                      {/* Large Section Images Display */}
                      {viewMode === 'grid' ? (
                        <div className="gallery-grid-large grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                          {section.images.map((image, index) => (
                            <motion.div
                              key={image.id}
                              className="gallery-item"
                              variants={animations.item}
                              whileHover={{ scale: 1.02 }}
                              onClick={() => handleImageClick(section, index)}
                            >
                              <div className="gallery-card bg-white rounded-lg shadow-lg overflow-hidden cursor-pointer">
                                <div className="image-wrapper relative" style={{paddingBottom: '75%'}}>
                                  <OptimizedImage
                                    src={image.src}
                                    alt={image.alt}
                                    className="absolute inset-0 w-full h-full object-cover transition-transform hover:scale-105"
                                    width={600}
                                    height={450}
                                    loading="lazy"
                                    sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, 33vw"
                                  />
                                  
                                  {image.featured && (
                                    <span className="absolute top-2 right-2 bg-primary text-white p-1 rounded-full">
                                      <FaStar />
                                    </span>
                                  )}
                                </div>
                                
                                {(image.title || image.description) && (
                                  <div className="p-4">
                                    {image.title && <h3 className="font-bold text-lg">{image.title}</h3>}
                                    {image.description && <p className="text-gray-600 mt-2">{image.description}</p>}
                                  </div>
                                )}
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      ) : (
                        <div className="gallery-list-large space-y-6">
                          {section.images.map((image, index) => (
                            <motion.div
                              key={image.id}
                              className="gallery-list-item bg-white rounded-lg shadow-lg overflow-hidden cursor-pointer"
                              variants={animations.item}
                              onClick={() => handleImageClick(section, index)}
                            >
                              <div className="flex flex-col md:flex-row">
                                <div className="image-wrapper md:w-2/5">
                                  <OptimizedImage
                                    src={image.src}
                                    alt={image.alt}
                                    className="w-full h-full object-cover aspect-video md:aspect-auto"
                                    width={600}
                                    height={400}
                                    loading="lazy"
                                  />
                                </div>
                                
                                <div className="p-6 md:w-3/5">
                                  <div className="flex items-start justify-between">
                                    <h3 className="font-bold text-xl">{image.title || 'Untitled Image'}</h3>
                                    {image.featured && (
                                      <span className="bg-primary text-white p-1 rounded-full">
                                        <FaStar />
                                      </span>
                                    )}
                                  </div>
                                  
                                  <p className="text-gray-600 mt-3">
                                    {image.description || 'No description available'}
                                  </p>
                                  
                                  {image.tags && image.tags.length > 0 && (
                                    <div className="mt-4">
                                      {image.tags.map((tag, idx) => (
                                        <span 
                                          key={idx} 
                                          className="inline-block bg-gray-100 px-3 py-1 rounded-full text-sm mr-2 mb-2"
                                        >
                                          {tag}
                                        </span>
                                      ))}
                                    </div>
                                  )}
                                  
                                  <button className="mt-4 text-primary flex items-center">
                                    <FaEye className="mr-1" /> View Full Size
                                  </button>
                                </div>
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      )}
                    </motion.div>
                  ))}
                </div>
              )}
            </div>
            
            {/* No Results Message */}
            {!loading && !error && getDisplayedSections().length === 0 && (
              <div className="no-results text-center py-10">
                <FaImages size={50} className="text-gray-400 mx-auto mb-4" />
                <h3 className="text-xl font-bold text-gray-600">No Gallery Content Found</h3>
                <p className="mt-2 text-gray-500">
                  We're currently updating our gallery with new images. Please check back soon!
                </p>
              </div>
            )}
            
            {/* Testimonials Section */}
            {!loading && !error && testimonials.length > 0 && (
              <div className="mt-16 mb-10">
                {renderTestimonials()}
              </div>
            )}
            
            {/* Back to top button */}
            <button
              onClick={scrollToTop}
              className="back-to-top fixed bottom-6 right-6 p-3 bg-primary text-white rounded-full shadow-lg hover:bg-primary-dark transition-colors"
              aria-label="Back to Top"
            >
              <FaAngleUp />
            </button>
          </>
        )}
      </div>
      
      {/* Professional Gallery Modal for viewing images */}
      <ProfessionalGalleryModal
        isOpen={isGalleryModalOpen}
        onClose={() => setIsGalleryModalOpen(false)}
        images={galleryModalImages}
        title={galleryModalTitle}
        initialIndex={galleryModalInitialIndex}
      />
    </div>
  );
};

export default GalleryPage;
